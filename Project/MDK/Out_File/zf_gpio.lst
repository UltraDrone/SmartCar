C251 COMPILER V5.60.0,  zf_gpio                                                            06/07/24  23:05:04  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_gpio
OBJECT MODULE PLACED IN .\Out_File\zf_gpio.obj
COMPILER INVOKED BY: G:\Keil_v5\C251\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_gpio.c XSMALL INTR2 WARNING
                    -LEVEL(3) OPTIMIZE(0,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\se
                    -ekfree_peripheral;..\CODE;..\USER\inc;..\USER\src;..\CODE) DEBUG PRINT(.\Out_File\zf_gpio.lst) OBJECT(.\Out_File\zf_gpio
                    -.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,Öð·É¿Æ¼¼
    4           * All rights reserved.
    5           * ¼¼ÊõÌÖÂÛQQÈº£ºÒ»Èº£º179029047(ÒÑÂú)  ¶þÈº£º244861897(ÒÑÂú)  ÈýÈº£º824575535
    6           *
    7           * ÒÔÏÂËùÓÐÄÚÈÝ°æÈ¨¾ùÊôÖð·É¿Æ¼¼ËùÓÐ£¬Î´¾­ÔÊÐí²»µÃÓÃÓÚÉÌÒµÓÃÍ¾£¬
    8           * »¶Ó­¸÷Î»Ê¹ÓÃ²¢´«²¥±¾³ÌÐò£¬ÐÞ¸ÄÄÚÈÝÊ±±ØÐë±£ÁôÖð·É¿Æ¼¼µÄ°æÈ¨ÉùÃ÷¡£
    9           *
   10           * @file                gpio
   11           * @company                     ³É¶¼Öð·É¿Æ¼¼ÓÐÏÞ¹«Ë¾
   12           * @author              Öð·É¿Æ¼¼(QQ790875685)
   13           * @version             ²é¿´docÄÚversionÎÄ¼þ °æ±¾ËµÃ÷
   14           * @Software            MDK FOR C251 V5.60
   15           * @Target core         STC32G12K128
   16           * @Taobao              https://seekfree.taobao.com/
   17           * @date                2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          
   21          #include "zf_gpio.h"
   22          
   23          
   24          #define PxPU_BASE_ADDR  0x7EFE10
   25          
   26          //-------------------------------------------------------------------------------------------------------
             -------------
   27          //  @brief      GPIOÉèÖÃÒý½ÅÉÏÀ­µç×èÉèÖÃ
   28          //  @param      pin         Ñ¡ÔñÒý½Å£¨P0_0-P7_7£©
   29          //  @param      pull        ÉèÖÃÉÏÏÂÀ­µç×è NOPULL:²»ÉèÖÃ PULLUP:ÉÏÀ­
   30          //  @return     void
   31          //  Sample usage:           gpio_pull_set(P0_0,NOPULL);       // ÉèÖÃP0.0Òý½ÅÃ»ÓÐÉÏÏÂÀ­µç×è
   32          //-------------------------------------------------------------------------------------------------------
             -------------
   33          void gpio_pull_set(PIN_enum pin, PULL_enum pull)
   34          {
   35   1          if(PULLUP == pull)
   36   1          {
   37   2              (*(unsigned char volatile far *)(PxPU_BASE_ADDR + (pin >> 4))) |= (1 << (pin & 0x0F));
   38   2          }
   39   1          else if(NOPULL == pull)
   40   1          {
   41   2              (*(unsigned char volatile far *)(PxPU_BASE_ADDR + (pin >> 4))) &= ~(1 << (pin & 0x0F));
   42   2          }
   43   1      }
   44          
   45          
   46          
   47          //-------------------------------------------------------------------------------------------------------
             -------------
   48          //  @brief      GPIOÉèÖÃÒý½ÅÄ£Ê½
   49          //  @param      pin         Ñ¡ÔñÒý½Å£¨P0_0-P5_4£©
   50          //  @param      mode        Òý½ÅÄ£Ê½ GPIO:×¼Ë«Ïò¿Ú, GPO_PP:ÍÆÍìÊä³ö, GPI_IMPEDANCE:¸ß×èÊäÈë, GPI_OD:¿ªÂ©Ê
             -ä³ö
C251 COMPILER V5.60.0,  zf_gpio                                                            06/07/24  23:05:04  PAGE 2   

   51          //  @return     void
   52          //  Sample usage:           gpio_mode(P0_0,GPIO);       // ÉèÖÃP0.0ÉèÖÃÎªË«ÏòIO
   53          //-------------------------------------------------------------------------------------------------------
             -------------
   54          void gpio_mode(PIN_enum pin, GPIOMODE_enum mode)
   55          {
   56   1          if(GPIO == mode)
   57   1          {
   58   2              if(0x00 == (pin & 0xF0))        //P0
   59   2              {
   60   3                  P0M1 &= ~(1 << (pin & 0xF));
   61   3                  P0M0 &= ~(1 << (pin & 0xF));
   62   3              }
   63   2      
   64   2              if(0x10 == (pin & 0xF0))        //P1
   65   2              {
   66   3                  P1M1 &= ~(1 << (pin & 0xF));
   67   3                  P1M0 &= ~(1 << (pin & 0xF));
   68   3              }
   69   2      
   70   2              if(0x20 == (pin & 0xF0))        //P2
   71   2              {
   72   3                  P2M1 &= ~(1 << (pin & 0xF));
   73   3                  P2M0 &= ~(1 << (pin & 0xF));
   74   3              }
   75   2      
   76   2              if(0x30 == (pin & 0xF0))        //P3
   77   2              {
   78   3                  P3M1 &= ~(1 << (pin & 0xF));
   79   3                  P3M0 &= ~(1 << (pin & 0xF));
   80   3              }
   81   2      
   82   2              if(0x40 == (pin & 0xF0))        //P4
   83   2              {
   84   3                  P4M1 &= ~(1 << (pin & 0xF));
   85   3                  P4M0 &= ~(1 << (pin & 0xF));
   86   3              }
   87   2      
   88   2              if(0x50 == (pin & 0xF0))        //P5
   89   2              {
   90   3                  P5M1 &= ~(1 << (pin & 0xF));
   91   3                  P5M0 &= ~(1 << (pin & 0xF));
   92   3              }
   93   2      
   94   2              if(0x60 == (pin & 0xF0))        //P5
   95   2              {
   96   3                  P6M1 &= ~(1 << (pin & 0xF));
   97   3                  P6M0 &= ~(1 << (pin & 0xF));
   98   3              }
   99   2      
  100   2              if(0x70 == (pin & 0xF0))        //P5
  101   2              {
  102   3                  P7M1 &= ~(1 << (pin & 0xF));
  103   3                  P7M0 &= ~(1 << (pin & 0xF));
  104   3              }
  105   2          }
  106   1          else if(GPO_PP == mode)
  107   1          {
  108   2              if(0x00 == (pin & 0xF0))        //P0
  109   2              {
  110   3                  P0M1 &= ~(1 << (pin & 0xF));
  111   3                  P0M0 |=  (1 << (pin & 0xF));
  112   3              }
  113   2      
  114   2              if(0x10 == (pin & 0xF0))        //P1
  115   2              {
C251 COMPILER V5.60.0,  zf_gpio                                                            06/07/24  23:05:04  PAGE 3   

  116   3                  P1M1 &= ~(1 << (pin & 0xF));
  117   3                  P1M0 |=  (1 << (pin & 0xF));
  118   3              }
  119   2      
  120   2              if(0x20 == (pin & 0xF0))        //P2
  121   2              {
  122   3                  P2M1 &= ~(1 << (pin & 0xF));
  123   3                  P2M0 |=  (1 << (pin & 0xF));
  124   3              }
  125   2      
  126   2              if(0x30 == (pin & 0xF0))        //P3
  127   2              {
  128   3                  P3M1 &= ~(1 << (pin & 0xF));
  129   3                  P3M0 |=  (1 << (pin & 0xF));
  130   3              }
  131   2      
  132   2              if(0x40 == (pin & 0xF0))        //P4
  133   2              {
  134   3                  P4M1 &= ~(1 << (pin & 0xF));
  135   3                  P4M0 |=  (1 << (pin & 0xF));
  136   3              }
  137   2      
  138   2              if(0x50 == (pin & 0xF0))        //P5
  139   2              {
  140   3                  P5M1 &= ~(1 << (pin & 0xF));
  141   3                  P5M0 |=  (1 << (pin & 0xF));
  142   3              }
  143   2      
  144   2              if(0x60 == (pin & 0xF0))        //P4
  145   2              {
  146   3                  P6M1 &= ~(1 << (pin & 0xF));
  147   3                  P6M0 |=  (1 << (pin & 0xF));
  148   3              }
  149   2      
  150   2              if(0x70 == (pin & 0xF0))        //P5
  151   2              {
  152   3                  P7M1 &= ~(1 << (pin & 0xF));
  153   3                  P7M0 |=  (1 << (pin & 0xF));
  154   3              }
  155   2      
  156   2          }
  157   1          else if(GPI_IMPEDANCE == mode)
  158   1          {
  159   2              if(0x00 == (pin & 0xF0))        //P0
  160   2              {
  161   3                  P0M1 |=  (1 << (pin & 0xF));
  162   3                  P0M0 &= ~(1 << (pin & 0xF));
  163   3              }
  164   2      
  165   2              if(0x10 == (pin & 0xF0))        //P1
  166   2              {
  167   3                  P1M1 |=  (1 << (pin & 0xF));
  168   3                  P1M0 &= ~(1 << (pin & 0xF));
  169   3              }
  170   2      
  171   2              if(0x20 == (pin & 0xF0))        //P2
  172   2              {
  173   3                  P2M1 |=  (1 << (pin & 0xF));
  174   3                  P2M0 &= ~(1 << (pin & 0xF));
  175   3              }
  176   2      
  177   2              if(0x30 == (pin & 0xF0))        //P3
  178   2              {
  179   3                  P3M1 |=  (1 << (pin & 0xF));
  180   3                  P3M0 &= ~(1 << (pin & 0xF));
  181   3              }
C251 COMPILER V5.60.0,  zf_gpio                                                            06/07/24  23:05:04  PAGE 4   

  182   2      
  183   2              if(0x40 == (pin & 0xF0))        //P4
  184   2              {
  185   3                  P4M1 |=  (1 << (pin & 0xF));
  186   3                  P4M0 &= ~(1 << (pin & 0xF));
  187   3              }
  188   2      
  189   2              if(0x50 == (pin & 0xF0))        //P5
  190   2              {
  191   3                  P5M1 |=  (1 << (pin & 0xF));
  192   3                  P5M0 &= ~(1 << (pin & 0xF));
  193   3              }
  194   2      
  195   2              if(0x60 == (pin & 0xF0))        //P5
  196   2              {
  197   3                  P6M1 |=  (1 << (pin & 0xF));
  198   3                  P6M0 &= ~(1 << (pin & 0xF));
  199   3              }
  200   2      
  201   2              if(0x70 == (pin & 0xF0))        //P5
  202   2              {
  203   3                  P7M1 |=  (1 << (pin & 0xF));
  204   3                  P7M0 &= ~(1 << (pin & 0xF));
  205   3              }
  206   2          }
  207   1          else if(GPI_OD == mode)
  208   1          {
  209   2              if(0x00 == (pin & 0xF0))        //P0
  210   2              {
  211   3                  P0M1 |= (1 << (pin & 0xF));
  212   3                  P0M0 |= (1 << (pin & 0xF));
  213   3              }
  214   2      
  215   2              if(0x10 == (pin & 0xF0))        //P1
  216   2              {
  217   3                  P1M1 |= (1 << (pin & 0xF));
  218   3                  P1M0 |= (1 << (pin & 0xF));
  219   3              }
  220   2      
  221   2              if(0x20 == (pin & 0xF0))        //P2
  222   2              {
  223   3                  P2M1 |= (1 << (pin & 0xF));
  224   3                  P2M0 |= (1 << (pin & 0xF));
  225   3              }
  226   2      
  227   2              if(0x30 == (pin & 0xF0))        //P3
  228   2              {
  229   3                  P3M1 |= (1 << (pin & 0xF));
  230   3                  P3M0 |= (1 << (pin & 0xF));
  231   3              }
  232   2      
  233   2              if(0x40 == (pin & 0xF0))        //P4
  234   2              {
  235   3                  P4M1 |= (1 << (pin & 0xF));
  236   3                  P4M0 |= (1 << (pin & 0xF));
  237   3              }
  238   2      
  239   2              if(0x50 == (pin & 0xF0))        //P5
  240   2              {
  241   3                  P5M1 |= (1 << (pin & 0xF));
  242   3                  P5M0 |= (1 << (pin & 0xF));
  243   3              }
  244   2      
  245   2              if(0x60 == (pin & 0xF0))        //P5
  246   2              {
  247   3                  P6M1 |= (1 << (pin & 0xF));
C251 COMPILER V5.60.0,  zf_gpio                                                            06/07/24  23:05:04  PAGE 5   

  248   3                  P6M0 |= (1 << (pin & 0xF));
  249   3              }
  250   2      
  251   2              if(0x70 == (pin & 0xF0))        //P5
  252   2              {
  253   3                  P7M1 |= (1 << (pin & 0xF));
  254   3                  P7M0 |= (1 << (pin & 0xF));
  255   3              }
  256   2          }
  257   1      }
  258          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2466     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         8     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
