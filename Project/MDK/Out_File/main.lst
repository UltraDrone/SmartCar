C251 COMPILER V5.60.0,  main                                                               03/07/24  18:52:16  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: G:\Keil_v5\C251\C251\BIN\C251.EXE ..\USER\src\main.c XSMALL INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED)
                    - BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;
                    -..\USER\inc;..\USER\src;..\CODE) DEBUG PRINT(.\Out_File\main.lst) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                main
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ790875685)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software                    MDK FOR C251 V5.60
   15           * @Target core         STC32G12K128
   16           * @Taobao                      https://seekfree.taobao.com/
   17           * @date                2020-12-18
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "headfile.h"
   21          float a = 0.1;
   22          /*
   23           * 系统频率，可查看board.h中的 FOSC 宏定义修改。
   24           * board.h文件中FOSC的值设置为0,则程序自动设置系统频率为33.1776MHZ
   25           * 在board_init中,已经将P54引脚设置为复位
   26           * 如果需要使用P54引脚,可以在board.c文件中的board_init()函数中删除SET_P54_RESRT即可
   27           */
   28          
   29          
   30          
   31          void BUZZ_Init(void)
   32          {
   33   1          gpio_mode(P6_7, GPO_PP);
   34   1          BUZZPin = 0;                // 先关闭蜂鸣器
   35   1      }
   36          
   37          
   38          
   39          
   40          unsigned char FlagEnter = 0, FlagCancel = 0, FlagUp = 0, FlagDown = 0;
   41          unsigned char LastFlagEnter = 0, LastFlagCancel = 0, LastFlagUp = 0, LastFlagDown = 0;
   42          void KeySystem(void);
   43          GUIS guis[5][8];
   44          unsigned char guiNumber[5] = {5, 8, 8, 8, 6};
   45          unsigned char guiSelect = 0, guiScene = 0, guiEdit = 0;
   46          unsigned char guiTop = 0;
   47          void Gui_TEST_Init(void);
   48          
   49          
   50          void All_Init(void)
   51          {
   52   1          DisableGlobalIRQ();                                                                                 // 关闭总中断
   53   1          board_init();                                                                                                               // 初始化寄存器,勿删除此句代码。
   54   1          Encoder_Init();                                                                                                     // 编码器初始化
   55   1          Motor_Init();                                                                                                               // 电机初始化
C251 COMPILER V5.60.0,  main                                                               03/07/24  18:52:16  PAGE 2   

   56   1          init_Steer_PWM();                                                                                           // 舵机初始化
   57   1          BUZZ_Init();                                                                                                                // 蜂鸣器高电平点亮
   58   1          Analog_Digital_Converter_Init();                            // ADC初始化
   59   1          //Tof_Init();                                                                                                                       // 测距模块初始化
   60   1          //imu660ra_init();                                                                                          // 姿态传感器初始化
   61   1          oled_init();                                                                                                                // 初始化oled屏幕
   62   1          pit_timer_ms(TIM_1, 5);                                                             // 使用定时器做周期中断，时间5ms一次
   63   1          wireless_uart_init();                                                                               // 无线串口初始化: UART4_TX_P03   UART4_RX_P02  115200  TIM2
   64   1          //////////////////////////////////////////////////////////////////
   65   1          Flag_Init();                                                                                                                // Fuse标志位初始化（置0）
   66   1          PID_Parameter_Init(&TurnPID);                                               // 转向PID结构体初始化
   67   1          PID_Parameter_Init(&SpeedPID);                                      // 速度PID结构体初始化
   68   1          EnableGlobalIRQ();                                                                                  // 开启总中断
   69   1          wireless_uart_send_buff("Init OK!\n", 9); // 无线串口发送初始化完成信息
   70   1              //Tof_Init();
   71   1              Gui_TEST_Init();
   72   1              slinit();
   73   1      }
   74          
   75          void main()
   76          {
   77   1          //char txt[20];                                                                                     // sprintf容器
   78   1          //char mess[30];                                                                            // wireless容器
   79   1          /*----测试函数(内部本身有死循环)----*/
   80   1          //  Test_Motor(1);                  // 1:正转  0:反转
   81   1          // 速度参数
   82   1          ClsLoop_Set_Speed  = 2700;                                          // 闭环速度（避障之后）
   83   1          ClsLoop_Speed = ClsLoop_Set_Speed;
   84   1          OpenLoop_Set_Speed = 2700;                                          // 开环速度（避障之前）
   85   1          OpenLoop_Speed = OpenLoop_Set_Speed;
   86   1          // 转向环参数
   87   1          Turn_Suquence = 0;                                                                          // 转向PID下标
   88   1              vtest = 5;
   89   1          // 发车方向（0：左入左出  1：右入右出）
   90   1          Default_Dir = 0;                                                                                    // 发车、入库、避障方向一致
   91   1      
   92   1          All_Init();                                                                                         // 全体硬件初始化
   93   1              /*while(1){
   94   1                      KeySystem();
   95   1                      delay_ms(500);
   96   1              }*/
   97   1              while(P60 == 0 || P64 == 0){
   98   2                      go_motor(-2000, -2000);
   99   2                      delay_ms(20);
  100   2                      go_motor(2000, 2000);
  101   2                      delay_ms(20);
  102   2              }
  103   1          while (1) {
  104   2                      KeySystem();
  105   2                      Flag.start_go = go_flag;
  106   2              /**********显示5个电感值************/
  107   2      //        if(!showing){
  108   2      //                      sprintf(txt, "Mid_Adc= %05d", adc_date[6]);
  109   2      //                      oled_p6x8str(1, 1, txt);   // 显示
  110   2      //                      sprintf(txt, "Left_Adc= %05d", adc_date[0]);
  111   2      //                      oled_p6x8str(1, 4, txt);   // 显示
  112   2      //                      sprintf(txt, "Right_Adc= %05d", adc_date[1]);
  113   2      //                      oled_p6x8str(1, 5, txt);   // 显示
  114   2      //                      sprintf(txt, "Left_Xie= %05d", adc_date[2]);
  115   2      //                      oled_p6x8str(1, 6, txt);   // 显示
  116   2      //                      sprintf(txt, "Right_Xie= %05d", adc_date[3]);
  117   2      //                      oled_p6x8str(1, 7, txt);         // 显示
  118   2      //                      sprintf(txt, "Left_Corner= %05d", adc_date[4]);
  119   2      //                      oled_p6x8str(1, 2, txt);   // 显示
  120   2      //                      sprintf(txt, "Right_Corner= %05d", adc_date[5]);
  121   2      //                      oled_p6x8str(1, 3, txt);   // 显示
C251 COMPILER V5.60.0,  main                                                               03/07/24  18:52:16  PAGE 3   

  122   2      //              }else{
  123   2      //                      sprintf(txt, "adc_deviation = %05d", adc_deviation);
  124   2      //                      oled_p6x8str(1, 1, txt);   // 显示
  125   2      //                      sprintf(txt, "Speed_PWM = %05d", Speed_PWM);
  126   2      //                      oled_p6x8str(1, 2, txt);   // 显示
  127   2      //                      sprintf(txt, "Turn_PWM = %05d", Turn_PWM);
  128   2      //                      oled_p6x8str(1, 3, txt);   // 显示
  129   2      //                      sprintf(txt, "LEFT_PWM = %05d", All_PWM_left);
  130   2      //                      oled_p6x8str(1, 4, txt);   // 显示
  131   2      //                      sprintf(txt, "RIGHT_PWM = %05d", All_PWM_right);
  132   2      //                      oled_p6x8str(1, 5, txt);   // 显示
  133   2      //              }
  134   2                      
  135   2              //                      sprintf(txt,"adc_deviation= %05d",adc_deviation);
  136   2              //                      oled_p6x8str(1, 8, txt); // 显示
  137   2      
  138   2              /* 调试编码器 */
  139   2              //                      sprintf(mess,"%d,%d,%d\n",right_speed,left_speed,real_speed);                   // 编码器
  140   2      
  141   2              /* 调试速度闭环 */
  142   2              //                      sprintf(mess,"%d,%d\n",real_speed,Speed_PWM);
  143   2              //                      wireless_uart_send_buff(mess,30);                               // 右轮速度发送
  144   2      
  145   2              /* 调试IMU660 */
  146   2              //                              sprintf(mess,"%f\n",Slope_gyro);
  147   2              //                              wireless_uart_send_buff(mess,30);
  148   2      
  149   2              /* 发车 */
  150   2                      //go_motor(2000, 2000);
  151   2                      
  152   2              if (Flag.Game == 0) {
  153   3                  LightOn;
  154   3                  delay_ms(500);
  155   3                  //OutInGarage(Default_Dir, 2000);   // 出库
  156   3                  LightOff;
  157   3                  Flag.Game = 1;                                                                      // 防止再次进入
  158   3                  int_OK = 1;
  159   3                  Flag_Slope = 1  ;
  160   3                  go_flag = 1;                                                        // 执行Fuse全局控制
  161   3              }
  162   2      
  163   2              // 先不编译方便调试，需要编译时将0 -> 1
  164   2              #if 0
                       /* 停车 */
                       else if (Flag.Game == 1) {
                           STOP_Analyse();    // 停车检测 + 入库
                       }
               
                       #endif
  171   2          }
  172   1      }
  173          
  174          void Gui_TEST_Init(void){
  175   1              float *PID;
  176   1              guis[0][0].type = GUI_TYPE_SCENE_CHANGE;
  177   1              guis[0][1].type = GUI_TYPE_SCENE_CHANGE;
  178   1              guis[0][2].type = GUI_TYPE_SCENE_CHANGE;
  179   1              guis[0][3].type = GUI_TYPE_SCENE_CHANGE;
  180   1              guis[0][4].type = GUI_TYPE_EDIT_INT32_VALUE;
  181   1              strcpy(guis[0][0].names, "ADC");
  182   1              strcpy(guis[0][1].names, "SP");
  183   1              strcpy(guis[0][2].names, "PID");
  184   1              strcpy(guis[0][3].names, "RAT");
  185   1              strcpy(guis[0][4].names, "GO");
  186   1              guis[0][0].sceneGoTo = 1;
  187   1              guis[0][1].sceneGoTo = 2;
C251 COMPILER V5.60.0,  main                                                               03/07/24  18:52:16  PAGE 4   

  188   1              guis[0][2].sceneGoTo = 3;
  189   1              guis[0][3].sceneGoTo = 4;
  190   1              guis[0][4].intval = &go_flag;
  191   1              guis[0][4].p1 = 1; guis[0][4].p2 = 1;
  192   1              
  193   1              guis[1][0].type = GUI_TYPE_SCENE_CHANGE;
  194   1              guis[1][1].type = GUI_TYPE_SHOW_INT32_VALUE;
  195   1              guis[1][2].type = GUI_TYPE_SHOW_INT32_VALUE;
  196   1              guis[1][3].type = GUI_TYPE_SHOW_INT32_VALUE;
  197   1              guis[1][4].type = GUI_TYPE_SHOW_INT32_VALUE;
  198   1              guis[1][5].type = GUI_TYPE_SHOW_INT32_VALUE;
  199   1              guis[1][6].type = GUI_TYPE_SHOW_INT32_VALUE;
  200   1              guis[1][7].type = GUI_TYPE_SHOW_INT32_VALUE;
  201   1              strcpy(guis[1][0].names, "BK");
  202   1              strcpy(guis[1][1].names, "M");
  203   1              strcpy(guis[1][2].names, "L");
  204   1              strcpy(guis[1][3].names, "R");
  205   1              strcpy(guis[1][4].names, "LX");
  206   1              strcpy(guis[1][5].names, "RX");
  207   1              strcpy(guis[1][6].names, "LC");
  208   1              strcpy(guis[1][7].names, "RC");
  209   1              guis[1][0].sceneGoTo = 0;
  210   1              guis[1][1].intval = (int*)(&adc_date[6]);
  211   1              guis[1][2].intval = (int*)(&adc_date[0]);
  212   1              guis[1][3].intval = (int*)(&adc_date[1]);
  213   1              guis[1][4].intval = (int*)(&adc_date[2]);
  214   1              guis[1][5].intval = (int*)(&adc_date[3]);
  215   1              guis[1][6].intval = (int*)(&adc_date[4]);
  216   1              guis[1][7].intval = (int*)(&adc_date[5]);
  217   1              
  218   1              guis[2][0].type = GUI_TYPE_SCENE_CHANGE;
  219   1              guis[2][1].type = GUI_TYPE_SHOW_INT32_VALUE;
  220   1              guis[2][2].type = GUI_TYPE_SHOW_INT32_VALUE;
  221   1              guis[2][3].type = GUI_TYPE_SHOW_INT32_VALUE;
  222   1              guis[2][4].type = GUI_TYPE_SHOW_INT32_VALUE;
  223   1              guis[2][5].type = GUI_TYPE_SHOW_INT32_VALUE;
  224   1              guis[2][6].type = GUI_TYPE_SHOW_INT32_VALUE;
  225   1              guis[2][7].type = GUI_TYPE_SHOW_INT32_VALUE;
  226   1              strcpy(guis[2][0].names, "BK");
  227   1              strcpy(guis[2][1].names, "ADO");
  228   1              strcpy(guis[2][2].names, "TPM");
  229   1              strcpy(guis[2][3].names, "SPM");
  230   1              strcpy(guis[2][4].names, "LPM");
  231   1              strcpy(guis[2][5].names, "RPM");
  232   1              strcpy(guis[2][6].names, "lre");
  233   1              strcpy(guis[2][7].names, "rre");
  234   1              guis[2][0].sceneGoTo = 0;
  235   1              guis[2][1].intval = &adc_deviation;
  236   1              guis[2][2].intval = &Turn_PWM;
  237   1              guis[2][3].intval = &Speed_PWM;
  238   1              guis[2][4].intval = &All_PWM_left;
  239   1              guis[2][5].intval = &All_PWM_right;
  240   1              guis[2][6].intval = &left_speed;
  241   1              guis[2][7].intval = &right_speed;
  242   1              
  243   1              guis[3][0].type = GUI_TYPE_SCENE_CHANGE;
  244   1              guis[3][1].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  245   1              guis[3][2].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  246   1              guis[3][3].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  247   1              guis[3][4].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  248   1              guis[3][5].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  249   1              guis[3][6].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  250   1              guis[3][7].type = GUI_TYPE_EDIT_INT32_VALUE;
  251   1              strcpy(guis[3][0].names, "BK");
  252   1              strcpy(guis[3][1].names, "KP"); //实际上不完全是kp
  253   1              strcpy(guis[3][2].names, "KP2");        //???
C251 COMPILER V5.60.0,  main                                                               03/07/24  18:52:16  PAGE 5   

  254   1              strcpy(guis[3][3].names, "KI");
  255   1              strcpy(guis[3][4].names, "KD");
  256   1              strcpy(guis[3][5].names, "KT");
  257   1              strcpy(guis[3][6].names, "KIS");
  258   1              strcpy(guis[3][7].names, "SP");
  259   1              guis[3][0].sceneGoTo = 0;
  260   1              guis[3][1].floatval = &vtest;
  261   1              PID = Turn_Pid[Turn_Suquence];
  262   1              guis[3][2].floatval = &(PID[KP]);
  263   1              guis[3][3].floatval = &(PID[KI]);
  264   1              guis[3][4].floatval = &(PID[KD]);
  265   1              guis[3][5].floatval = &(PID[KT]);
  266   1              guis[3][6].floatval = &ki_test;
  267   1              guis[3][7].intval = &(ClsLoop_Speed);
  268   1              guis[3][1].p1 = 1; guis[3][1].p2 = 1;
  269   1              guis[3][2].p1 = 1; guis[3][2].p2 = 10;
  270   1              guis[3][3].p1 = 1; guis[3][3].p2 = 10;
  271   1              guis[3][4].p1 = 10; guis[3][4].p2 = 1;
  272   1              guis[3][5].p1 = 10; guis[3][5].p2 = 1;
  273   1              guis[3][6].p1 = 1; guis[3][6].p2 = 10;
  274   1              guis[3][7].p1 = 100; guis[3][7].p2 = 1;
  275   1              
  276   1              guis[4][0].type = GUI_TYPE_SCENE_CHANGE;
  277   1              guis[4][1].type = GUI_TYPE_EDIT_INT32_VALUE;
  278   1              guis[4][2].type = GUI_TYPE_EDIT_INT32_VALUE;
  279   1              guis[4][3].type = GUI_TYPE_EDIT_INT32_VALUE;
  280   1              guis[4][4].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  281   1              guis[4][5].type = GUI_TYPE_EDIT_FLOAT_VALUE;
  282   1              strcpy(guis[4][0].names, "BK");
  283   1              strcpy(guis[4][1].names, "Sid");
  284   1              strcpy(guis[4][2].names, "Cor");
  285   1              strcpy(guis[4][3].names, "Xie");
  286   1              strcpy(guis[4][4].names, "RL");
  287   1              strcpy(guis[4][5].names, "RH");
  288   1              guis[4][0].sceneGoTo = 0;
  289   1              guis[4][1].intval = &SideRate;
  290   1              guis[4][2].intval = &CornerRate;
  291   1              guis[4][3].intval = &XieRate;
  292   1              guis[4][4].floatval = &RateLow;
  293   1              guis[4][5].floatval = &RateUp;
  294   1              guis[4][1].p1 = 50; guis[4][1].p2 = 1;
  295   1              guis[4][2].p1 = 50; guis[4][2].p2 = 1;
  296   1              guis[4][3].p1 = 50; guis[4][3].p2 = 1;
  297   1              guis[4][4].p1 = 1; guis[4][4].p2 = 10;
  298   1              guis[4][5].p1 = 1; guis[4][5].p2 = 10;
  299   1              return;
  300   1      }
  301          
  302          void keyStateChange(unsigned char* FlagButtom, unsigned char ButtomPin){
  303   1              if(*FlagButtom == 0){
  304   2                      if(ButtomPin == 0){
  305   3                              delay_ms(10);
  306   3                              if(ButtomPin == 0){
  307   4                                      *FlagButtom = 1;
  308   4                              }
  309   3                      }
  310   2              }else{
  311   2                      if(ButtomPin == 1){
  312   3                              delay_ms(10);
  313   3                              if(ButtomPin == 1){
  314   4                                      *FlagButtom = 0;
  315   4                              }
  316   3                      }
  317   2              }
  318   1              return;
  319   1      }
C251 COMPILER V5.60.0,  main                                                               03/07/24  18:52:16  PAGE 6   

  320          
  321          char keyPressed(unsigned char FlagButtom, unsigned char LastFlagButtom){
  322   1              return (FlagButtom == 1 && FlagButtom != LastFlagButtom);
  323   1      }
  324          
  325          void moveGuiSelection(char dir){
  326   1              if(!dir){
  327   2                      if(guiSelect == 0){
  328   3                              return;
  329   3                      }
  330   2                      guiSelect--;
  331   2                      if(guiSelect < guiTop){
  332   3                              guiTop = guiSelect;
  333   3                      }
  334   2              }else{
  335   2                      if(guiSelect == guiNumber[guiScene] - 1){
  336   3                              return;
  337   3                      }
  338   2                      guiSelect++;
  339   2                      if(guiSelect > guiTop + 6){
  340   3                              guiTop = guiSelect - 6;
  341   3                      }
  342   2              }
  343   1              return;
  344   1      }
  345          
  346          void KeySystem(void){
  347   1              int i = 0;
  348   1              char txt[20];
  349   1              keyStateChange(&FlagEnter, (BUTTOM_ENTER == 0) ? 0 : 1);
  350   1              keyStateChange(&FlagCancel, (BUTTOM_CANCEL == 0) ? 0 : 1);
  351   1              keyStateChange(&FlagUp, (BUTTOM_UP == 0) ? 0 : 1);
  352   1              keyStateChange(&FlagDown, (BUTTOM_DOWN == 0) ? 0 : 1);
  353   1              /*if(FlagEnter == 1 && FlagEnter != LastFlagEnter){
  354   1                      oled_fill(0x00);
  355   1                      showing = !showing;
  356   1              }*/
  357   1              if(!guiEdit){
  358   2                      if(keyPressed(FlagUp, LastFlagUp)){
  359   3                              oled_fill(0x00);
  360   3                              moveGuiSelection(0);
  361   3                      }else
  362   2                      if(keyPressed(FlagDown, LastFlagDown)){
  363   3                              oled_fill(0x00);
  364   3                              moveGuiSelection(1);
  365   3                      }
  366   2              }
  367   1              for(i = guiTop; i < guiNumber[guiScene], i < guiTop + 7; i++){
  368   2                      if(guiSelect == i){
  369   3                              if(guis[guiScene][i].type == GUI_TYPE_SCENE_CHANGE){
  370   4                                      if(keyPressed(FlagEnter, LastFlagEnter)){
  371   5                                              oled_fill(0x00);
  372   5                                              guiScene = guis[guiScene][i].sceneGoTo;
  373   5                                              guiTop = 0;
  374   5                                              guiSelect = 0;
  375   5                                      }
  376   4                                      sprintf(txt, "*%s", guis[guiScene][i].names);
  377   4                              }else
  378   3                              if(guis[guiScene][i].type == GUI_TYPE_SHOW_FLOAT_VALUE){
  379   4                                      sprintf(txt, "*%-8s %.2f ", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  380   4                              }else
  381   3                              if(guis[guiScene][i].type == GUI_TYPE_SHOW_INT32_VALUE){
  382   4                                      sprintf(txt, "*%-8s %05d ", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  383   4                              }else
  384   3                              if(guis[guiScene][i].type == GUI_TYPE_EDIT_FLOAT_VALUE){
  385   4                                      if(guiEdit == 0){
C251 COMPILER V5.60.0,  main                                                               03/07/24  18:52:16  PAGE 7   

  386   5                                              if(keyPressed(FlagEnter, LastFlagEnter)){
  387   6                                                      oled_fill(0x00);
  388   6                                                      guiEdit = 1;
  389   6                                              }
  390   5                                              sprintf(txt, "*%-8s %.2f ", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  391   5                                      }else{
  392   5                                              if(keyPressed(FlagEnter, LastFlagEnter)){
  393   6                                                      oled_fill(0x00);
  394   6                                                      guiEdit = 0;
  395   6                                                      saveConfig();
  396   6                                              }else
  397   5                                              if(keyPressed(FlagUp, LastFlagUp)){
  398   6                                                      oled_fill(0x00);
  399   6                                                      *(guis[guiScene][i].floatval) -= (float)guis[guiScene][i].p1 / (float)guis[guiScene][i].p2;
  400   6                                              }else
  401   5                                              if(keyPressed(FlagDown, LastFlagDown)){
  402   6                                                      oled_fill(0x00);
  403   6                                                      *(guis[guiScene][i].floatval) += (float)guis[guiScene][i].p1 / (float)guis[guiScene][i].p2;
  404   6                                              }
  405   5                                              sprintf(txt, "*%-8s<%.2f>", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  406   5                                      }
  407   4                              }else
  408   3                              if(guis[guiScene][i].type == GUI_TYPE_EDIT_INT32_VALUE){
  409   4                                      if(guiEdit == 0){
  410   5                                              if(keyPressed(FlagEnter, LastFlagEnter)){
  411   6                                                      oled_fill(0x00);
  412   6                                                      guiEdit = 1;
  413   6                                              }
  414   5                                              sprintf(txt, "*%-8s %05d ", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  415   5                                      }else{
  416   5                                              if(keyPressed(FlagEnter, LastFlagEnter)){
  417   6                                                      oled_fill(0x00);
  418   6                                                      guiEdit = 0;
  419   6                                                      saveConfig();
  420   6                                              }else
  421   5                                              if(keyPressed(FlagUp, LastFlagUp)){
  422   6                                                      oled_fill(0x00);
  423   6                                                      *(guis[guiScene][i].intval) -= (float)guis[guiScene][i].p1 / (float)guis[guiScene][i].p2;
  424   6                                              }else
  425   5                                              if(keyPressed(FlagDown, LastFlagDown)){
  426   6                                                      oled_fill(0x00);
  427   6                                                      *(guis[guiScene][i].intval) += (float)guis[guiScene][i].p1 / (float)guis[guiScene][i].p2;
  428   6                                              }
  429   5                                              sprintf(txt, "*%-8s<%05d>", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  430   5                                      }
  431   4                              }
  432   3                              oled_p6x8str(1, (uint8)(i - guiTop + 1), txt);
  433   3                      }else{
  434   3                              if(guis[guiScene][i].type == GUI_TYPE_SCENE_CHANGE){
  435   4                                      sprintf(txt, " %-s", guis[guiScene][i].names);
  436   4                              }else
  437   3                              if(guis[guiScene][i].type == GUI_TYPE_SHOW_FLOAT_VALUE){
  438   4                                      sprintf(txt, " %-8s %.2f ", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  439   4                              }else
  440   3                              if(guis[guiScene][i].type == GUI_TYPE_SHOW_INT32_VALUE){
  441   4                                      sprintf(txt, " %-8s %05d ", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  442   4                              }else
  443   3                              if(guis[guiScene][i].type == GUI_TYPE_EDIT_FLOAT_VALUE){
  444   4                                      if(guiEdit == 0){
  445   5                                              sprintf(txt, " %-8s %.2f ", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  446   5                                      }else{
  447   5                                              sprintf(txt, " %-8s<%.2f>", guis[guiScene][i].names, *(guis[guiScene][i].floatval));
  448   5                                      }
  449   4                              }else
  450   3                              if(guis[guiScene][i].type == GUI_TYPE_EDIT_INT32_VALUE){
  451   4                                      if(guiEdit == 0){
C251 COMPILER V5.60.0,  main                                                               03/07/24  18:52:16  PAGE 8   

  452   5                                              sprintf(txt, " %-8s %05d ", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  453   5                                      }else{
  454   5                                              sprintf(txt, " %-8s<%05d>", guis[guiScene][i].names, *(guis[guiScene][i].intval));
  455   5                                      }
  456   4                              }
  457   3                              oled_p6x8str(1, (uint8)(i - guiTop + 1), txt);
  458   3                      }
  459   2              }
  460   1              /*At24c02_Write_float(0x04, a++);
  461   1              a = At24c02_Read_float(0x04);*/
  462   1              if(guiScene == 0){
  463   2                      sprintf(txt, "%d, %d", (P60 == 1) ? 1 : 0, (P64 == 1) ? 1 : 0);
  464   2                      oled_p6x8str(1, 7, txt);
  465   2              }
  466   1              LastFlagEnter = FlagEnter;
  467   1              LastFlagCancel = FlagCancel;
  468   1              LastFlagUp = FlagUp;
  469   1              LastFlagDown = FlagDown;
  470   1      }
  471          
  472          
  473          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      4547     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       655     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       304     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
