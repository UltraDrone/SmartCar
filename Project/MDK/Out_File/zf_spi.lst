C251 COMPILER V5.60.0,  zf_spi                                                             06/07/24  23:05:04  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_spi
OBJECT MODULE PLACED IN .\Out_File\zf_spi.obj
COMPILER INVOKED BY: G:\Keil_v5\C251\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_spi.c XSMALL INTR2 WARNINGL
                    -EVEL(3) OPTIMIZE(0,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\see
                    -kfree_peripheral;..\CODE;..\USER\inc;..\USER\src;..\CODE) DEBUG PRINT(.\Out_File\zf_spi.lst) OBJECT(.\Out_File\zf_spi.ob
                    -j) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                spi
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ790875685)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software            MDK FOR C251 V5.60
   15           * @Target core         STC32G12K128
   16           * @Taobao              https://seekfree.taobao.com/
   17           * @date                2020-4-14
   18           ********************************************************************************************************
             -************/
   19          #pragma warning disable = 47
   20          
   21          #include "zf_gpio.h"
   22          #include "zf_spi.h"
   23          
   24          
   25          
   26          //-------------------------------------------------------------------------------------------------------
             -------------
   27          //  @brief      spi初始化函数(ss引脚由软件控制)
   28          //  @param      spi_n                   选择SPI模块(SPI_1-SPI_4)
   29          //  @param      sck_pin                 选择SCK引脚
   30          //  @param      mosi_pin                选择MOSI引脚
   31          //  @param      miso_pin                选择MISO引脚
   32          //  @param      mstr                    主从选择
   33          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL
             -=1 CPHA=1 //具体细节可自行百度
   34          //  @param      baud                    速率选择
   35          //  @since      v1.0
   36          //  Sample usage:                               spi_init(SPI_1, SPI1_SCLK_P15, SPI1_MOSI_P13, SPI1_MISO_P14, 0, MASTER, SYSclk_DIV_4
             -);
   37          //                                                              //初始化SPI1,主机模式,速率为系统频率/4，SCLK引脚P1.5 MOSI引脚P1.3 MISO引脚P1.4,SPI模式0
   38          //-------------------------------------------------------------------------------------------------------
             -------------
   39          void spi_init(SPIN_enum spi_n,
   40                        SPI_PIN_enum sck_pin,
   41                        SPI_PIN_enum mosi_pin,
   42                        SPI_PIN_enum miso_pin,
   43                        uint8 mode,
   44                        SPI_MSTR_enum mstr,
   45                        SPI_BAUD_enum baud)
   46          {
   47   1          switch(spi_n)
   48   1          {
   49   2              //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
   50   2              case SPI_CH1:
C251 COMPILER V5.60.0,  zf_spi                                                             06/07/24  23:05:04  PAGE 2   

   51   2                  gpio_mode(P1_3, GPIO);
   52   2                  gpio_mode(P1_4, GPIO);
   53   2                  gpio_mode(P1_5, GPIO);
   54   2                  break;
   55   2      
   56   2              case SPI_CH2:
   57   2                  gpio_mode(P2_3, GPIO);
   58   2                  gpio_mode(P2_4, GPIO);
   59   2                  gpio_mode(P2_5, GPIO);
   60   2                  break;
   61   2      
   62   2              case SPI_CH3:
   63   2                  gpio_mode(P4_0, GPIO);
   64   2                  gpio_mode(P4_1, GPIO);
   65   2                  gpio_mode(P4_3, GPIO);
   66   2                  break;
   67   2      
   68   2              case SPI_CH4:
   69   2                  gpio_mode(P3_4, GPIO);
   70   2                  gpio_mode(P3_3, GPIO);
   71   2                  gpio_mode(P3_2, GPIO);
   72   2                  break;
   73   2          }
   74   1      
   75   1          P_SW1 &= ~(0x03 << 2); //清除SPI功能脚选择位
   76   1      
   77   1          switch(spi_n)
   78   1          {
   79   2              case SPI_CH1:
   80   2                  P_SW1 |= (0x00 << 2);
   81   2                  break;
   82   2      
   83   2              case SPI_CH2:
   84   2                  P_SW1 |= (0x01 << 2);
   85   2                  break;
   86   2      
   87   2              case SPI_CH3:
   88   2                  P_SW1 |= (0x02 << 2);
   89   2                  break;
   90   2      
   91   2              case SPI_CH4:
   92   2                  P_SW1 |= (0x03 << 2);
   93   2                  break;
   94   2          }
   95   1      
   96   1          SPCTL &= 0xF3;              //清除SPI极性和相位
   97   1      
   98   1          switch(mode)
   99   1          {
  100   2              case 0:
  101   2      
  102   2                  break;
  103   2      
  104   2              case 1:
  105   2                  SPCTL |= 0x01 << 2;
  106   2                  break;
  107   2      
  108   2              case 2:
  109   2                  SPCTL |= 0x02 << 2;
  110   2                  break;
  111   2      
  112   2              case 3:
  113   2                  SPCTL |= 0x03 << 2;
  114   2                  break;
  115   2          }
  116   1      
C251 COMPILER V5.60.0,  zf_spi                                                             06/07/24  23:05:04  PAGE 3   

  117   1      
  118   1          SPCTL |= baud;              //速率设定
  119   1      
  120   1          if(mstr == MASTER)
  121   1          {
  122   2              SPCTL |= 1 << 7;        //忽略SS引脚功能，使用MSTR确定器件是主机还是从机
  123   2              SPCTL |= 1 << 4;        //主机模式
  124   2          }
  125   1          else
  126   1          {
  127   2              //不做操作
  128   2          }
  129   1      
  130   1          SPCTL |= 1 << 6;            //使能SPI功能
  131   1      }
  132          
  133          
  134          
  135          //-------------------------------------------------------------------------------------------------------
             -------------
  136          //  @brief      SPI发送接收函数
  137          //  @param      dat             发送的数据
  138          //  @since      v1.0
  139          //  Sample usage:                               buf_1 = spi_mosi(buf);    //发送buf的内容，并接收到buf_1里，长度为1字节
  140          //-------------------------------------------------------------------------------------------------------
             -------------
  141          uint8 spi_mosi(uint8 dat)
  142          {
  143   1          SPDAT = dat;                                        //DATA寄存器赋值
  144   1      
  145   1          while (!(SPSTAT & 0x80));           //查询完成标志
  146   1      
  147   1          SPSTAT = 0xc0;                  //清中断标志
  148   1          return SPDAT;
  149   1      }
  150          
  151          
  152          //-------------------------------------------------------------------------------------------------------
             -------------
  153          //  @brief      spi引脚切换函数(ss引脚由软件控制)
  154          //  @param      spi_n                   选择SPI模块(SPI_1-SPI_4)
  155          //  @param      sck_pin                 选择SCK引脚
  156          //  @param      mosi_pin                选择MOSI引脚
  157          //  @param      miso_pin                选择MISO引脚
  158          //  Sample usage:                               spi_change_pin(SPI_1,SPI1_SCLK_P15, SPI1_MOSI_P13,SPI1_MISO_P14);
  159          //                                                              //切换SPI引脚
  160          //-------------------------------------------------------------------------------------------------------
             -------------
  161          void spi_change_pin(SPIN_enum spi_n, SPI_PIN_enum sck_pin, SPI_PIN_enum mosi_pin, SPI_PIN_enum miso_pin)
  162          {
  163   1          P_SW1 &= ~(0x03 << 2); //清除SPI功能脚选择位
  164   1      
  165   1          switch(spi_n)
  166   1          {
  167   2              //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
  168   2              case SPI_CH1:
  169   2                  gpio_mode(P1_3, GPO_PP);
  170   2                  gpio_mode(P1_4, GPIO);
  171   2                  gpio_mode(P1_5, GPO_PP);
  172   2                  break;
  173   2      
  174   2              case SPI_CH2:
  175   2                  gpio_mode(P2_3, GPO_PP);
  176   2                  gpio_mode(P2_4, GPIO);
  177   2                  gpio_mode(P2_5, GPO_PP);
  178   2                  break;
C251 COMPILER V5.60.0,  zf_spi                                                             06/07/24  23:05:04  PAGE 4   

  179   2      
  180   2              case SPI_CH3:
  181   2                  gpio_mode(P4_0, GPO_PP);
  182   2                  gpio_mode(P4_1, GPIO);
  183   2                  gpio_mode(P4_3, GPO_PP);
  184   2                  break;
  185   2      
  186   2              case SPI_CH4:
  187   2                  gpio_mode(P3_4, GPO_PP);
  188   2                  gpio_mode(P3_3, GPIO);
  189   2                  gpio_mode(P3_2, GPO_PP);
  190   2                  break;
  191   2          }
  192   1      
  193   1      
  194   1          switch(spi_n)
  195   1          {
  196   2              case SPI_CH1:
  197   2                  P_SW1 |= (0x00 << 2);
  198   2                  break;
  199   2      
  200   2              case SPI_CH2:
  201   2                  P_SW1 |= (0x01 << 2);
  202   2                  break;
  203   2      
  204   2              case SPI_CH3:
  205   2                  P_SW1 |= (0x02 << 2);
  206   2                  break;
  207   2      
  208   2              case SPI_CH4:
  209   2                  P_SW1 |= (0x03 << 2);
  210   2                  break;
  211   2          }
  212   1      }
  213          
  214          
  215          
  216          //-------------------------------------------------------------------------------------------------------
             -------------
  217          //  @brief      spi模式切换函数
  218          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL
             -=1 CPHA=1 //具体细节可自行百度
  219          //  Sample usage:
  220          //-------------------------------------------------------------------------------------------------------
             -------------
  221          void spi_change_mode(uint8 mode)
  222          {
  223   1          SPCTL &= 0xF7;              //清除SPI极性和相位
  224   1      
  225   1          switch(mode)
  226   1          {
  227   2              case 0:
  228   2      
  229   2                  break;
  230   2      
  231   2              case 1:
  232   2                  SPCTL |= 0x01 << 2;
  233   2                  break;
  234   2      
  235   2              case 2:
  236   2                  SPCTL |= 0x02 << 2;
  237   2                  break;
  238   2      
  239   2              case 3:
  240   2                  SPCTL |= 0x03 << 2;
  241   2                  break;
C251 COMPILER V5.60.0,  zf_spi                                                             06/07/24  23:05:04  PAGE 5   

  242   2          }
  243   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       505     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        11     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
